

def feat_sel_sim(data, measure='luca', p=1):
    # Extracting dimensions
    l = np.max(data[:, -1])  # Number of classes
    m = data.shape[0]        # Number of samples
    t = data.shape[1] - 1    # Number of features

    dataold = data.copy()
    tmp = []

    # Forming idealvec using arithmetic mean
    idealvec_s = np.zeros((l, t))
    for k in range(1, int(l) + 1):
        idealvec_s[k - 1, :] = np.mean(data[data[:, -1] == k, :t], axis=0)

    # Scaling data between [0, 1]
    data_v = data[:, :t]
    data_c = data[:, t]  # Labels
    mins_v = np.min(data_v, axis=0)
    data_v = data_v + np.tile(np.abs(mins_v), (m, 1))
    tmp = np.tile(np.abs(mins_v), (l, 1))
    idealvec_s = idealvec_s + tmp
    maxs_v = np.max(data_v, axis=0)
    data_v = data_v / maxs_v
    idealvec_s = idealvec_s / np.tile(maxs_v, (l, 1))
    data = np.column_stack((data_v, data_c))

    # Sample data
    datalearn_s = data[:, :t]

    # Similarities
    sim = np.zeros((t, m, int(l)))
    for j in range(m):
        for i in range(t):
            for k in range(int(l)):
                sim[i, j, k] = (1 - np.abs(idealvec_s[k, i] ** p - datalearn_s[j, i]) ** p) ** (1 / p)

    # Reduce the number of dimensions in sim
    sim = sim.reshape((t, m * int(l))).T

    # Possibility for two different entropy measures
    if measure == 'luca':
        # Modifying zero and one values of the similarity values to work with De Luca's entropy measure
        delta = 1e-10
        sim[sim == 0] = delta
        sim[sim == 1] = 1 - delta
        H = np.sum(-sim * np.log(sim) - (1 - sim) * np.log(1 - sim))
    elif measure == 'park':
        H = np.sum(np.sin(np.pi / 2 * sim) + np.sin(np.pi / 2 * (1 - sim)) - 1)

    # Find the maximum feature
    index_rem = np.argmax(H)

    # Removing the feature from the data
    data_mod = np.column_stack((dataold[:, :index_rem], dataold[:, index_rem + 1:]))

    return data_mod, index_rem

# Example usage with dummy data
# Replace this with loading your MSL KDD dataset
# data = np.loadtxt('path/to/your/msl_kdd_dataset.csv', delimiter=',')
# data_mod, index_rem = feat_sel_sim(data)
